/**
 * Chapter15
 * 
 * 날짜와 시간
 * 
 * 실무에서 사용하는 애플리케이션은 대부분 날짜와 시간에 관한 데이터를 사용합니다. 애석한 일이지만 자바 스크립트의 Date 객체는 잘 설계됐다고 말하기는
 * 힘듭니다. 자바스크립트에서 제공하는 Date 객체의 기능이 불충분하니, 이 장에서는 Moment.js를 소개하려고 합니다.
 * Moment.js는 날짜와 시간에 관련된 널리 쓰이는 기능을 대부분 제공합니다.
 * 
 * 자바스크립트의 Date 객체는 원래 넷스케이프 프로그래머 켄 스미스(Ken Smith)가 만들었는데, 사실 자바의 java.util.Date을 가져온 것이나 다름없습
 * 니다. 따라서 자바스크립트와 자바가 아무 상관도 없다는 말은 사실이 아닙니다. 누군가가 당신에게 두 언어의 관계를 묻는다면 "음... Date 객체는 거의 비슷
 * 하고, 둘 다 C 언어의 문법을 이어받았죠. 그 외에는 공통점이 별로 없어요."라고 대답하면 될 겁니다.
 * 
 * '날짜와 시간'이라고 계속 말하기는 번거로우니, 이 장에서 '날짜'라고 하면 날짜와 시간을 말하는 겁니다. 시간을 명기하지 않고 날짜만 말하면, 그날의 정오라
 * 고 생각하면 됩니다.
 */
(() => {

    /**
     * 날짜, 타임존, 타임스탬프, 유닉스 시간
     * 
     * 까놓고 말해, 우리가 쓰는 그레고리안 달력은 형편없습니다. 지나치게 복잡하고, 시간을 나누는 기준도 모호한 데다가 윤년까지 있습니다. 타임존은 한술 더
     * 뜨죠. 하지만 현실이 그러니 어쩔 수 없이 적응해야 합니다.
     * 
     * 자바스크립트에서 Date 인스턴스는 모두 유닉스 시간 원점(Unix Epoch)으로부터 몇 밀리초가 지났는지 나타내는 숫자입니다. 자바스크립트는 보통 이 숫
     * 자를 사람이 읽기 편한 그레고리력 날짜로 변환합니다. 숫자형 표현이 필요하면 valueOf() 메서드를 쓰면 됩니다.
     */
    {
        const d = new Date();
        console.log(d);
        console.log(d.valueOf());
    }

    /**
     * Date 객체 만들기
     * 
     * Date 객체는 네 가지 방법으로 만들 수 있습니다. 바로 앞에서 사용한 것처럼 매개변수 없이 호출하면 날짜에 해당하는 Date 객체를 반환합니다. 문자열을
     * 제공하면 자바스크립트는 그 문자열을 해석해서 그에 맞는 날짜를 반환하려 합니다. 숫자를 넣으면 유닉스 타임스태프로 해석합니다. 예제를 보십시오.
     */
    {
        // 아래 결과는 해당 지역의 표준시에 따라 다를 수 있습니다.
        console.log(new Date()); // 현재 날짜

        // 자바스크립트의 월은 0으로 시작합니다. 즉 0은 1월이고, 1은 2월입니다.
        console.log(new Date(2015, 1, 14, 13, 30, 5, 500)); // 2015년 2월 14일 오후 1시 30분 5.5초

        // 유닉스 타임스탬프로 날짜 생성
        console.log(new Date(0)); // 12:00 A.M., Jan 1, 1970 UTC

        // 유닉스 시간 원점 이전의 날짜를 구할 때
        console.log(new Date(-365 * 24 * 60 * 60 * 1000));

        // 날짜 문자열 해석 (표준시를 기준으로 합니다.)
        console.log(new Date('June 14, 1903'));
        console.log(new Date('June 14, 1903 GMT-0000'));

        // 예제를 테스트해보면 결과가 항상 현재 지역의 표준시에 따라 나온다는 사실을 알게 될겁니다.
        // 자바스크립트는 원래 브라우저 기반 스크립트 언어이니 어쩌면 이렇게 하는 편이 올바른 일이 었을 겁니다.
        // 웹페이지에서 날짜 관련 데이터를 표시한다면 사용자의 타임존에 맞게 표시하는 편이 나을 테니까요. 하지만 인터넷은 전 세계 어디에서든 쓰이고, 노드가
        // 자바스크립트를 서버로 가져감에 따라 타임존을 더 일관되게 처리할 방법이 필요해졌습니다.
    }

    /**
     * Moment.js
     * 
     * 날짜 조작은 자주 사용하는 중요한 문제이므로 Moment.js 라이브러리를 소개하기로 했습니다.
     * 
     * Moment.js에는 타임존을 지원하는 버전과 지원하지 않는 버전 두 가지가 있습니다. 타임존 버전은 세계의 타임존 정보를 모두 담고 있어서 꽤 양이 많습니다.
     * 다음 설명은 모두 타임존 버전을 기준으로 합니다.
     */

    /**
     * 날짜 데이터 만들기
     */
    {
        /**
         * 1. 서버에서 날짜 생성하기
         * 
         * 서버에서 날짜를 생성할 때는 항상 UTC를 사용하거나 타임존을 명시하는 편이 좋습니다.
         * UTC 날짜를 사용할 수 있는 환경이라면 Date 객체의 UTC 메서드를 사용하십시오.
         */
        {
            /**
             * NOTE_ Date.UTC는 Date의 매개변수를 똑같이 받지만, 새 Date 인스턴스를 반환하지 않고 해당 날짜의 숫자형 값을 반환합니다. 이 숫자를 Date
             * 생성자에 넘기면 날짜 인스턴스를 얻을 수 있습니다.
             */
            {
                const d = new Date(Date.UTC(2016, 4, 27)); // May 27, 2016 UTC
            }

            /**
             * 특정 타임존에 있는 서버에서 날짜를 생성 할 때는 moment.tz를 써서 Date 인스턴스를 만들면 타임존을 손으로 변환할 필요가 없습니다.
             */
            {
                const a = moment.tz("2013-11-18 11:55", "America/Toronto");
                const b = moment.tz("May 12th 2014 8PM", "MMM Do YYYY hA", "America/Toronto");
                const c = moment.tz(1403454068850, "America/Toronto");
                console.log(a.format()); // 2013-11-18T11:55:00-05:00
                console.log(b.format()); // 2014-05-12T20:00:00-04:00
                console.log(c.format()); // 2014-06-22T12:21:08-04:00
            }
        }

        /**
         * 브라우저에서 날짜 생성하기
         * 
         * 일반적으로 자바스크립트의 기본 동작은 브라우저에서 사용하기에 알맞습니다. 브라우저는 운영체제를 통해 타임존 정보를 알 수 있고, 사용자는
         * 일반적으로 그 지역의 시간을 선호합니다. 앱에서 다른 타임존의 날짜를 처리해야 한다면 Moment.js를 이용해 타임존을 변환하십시오.
         */
    }

    /**
     * 날짜 데이터 전송하기
     * 
     * 서버에서 브라우저로 날짜를 전송하거나, 반대로 브라우저에서 서버로  날짜를 전송할 때는 조금 복잡할 수 있습니다. 서버와 브라우저가 다른 타임
     * 존에 있더라도 사용자는 자신의 타임존을 기준으로 날짜를 보고 싶어 할 겁니다. 다행히 자바스크립트의 Date 인스턴스는 날짜를 저장할 때 UTC
     * 를 기준으로 유닉스 타임스탬프를 저장하므로, Date 객체를 그냥 전송해도 일반적으로 안전합니다.
     * 
     * 자바스크립트에서 날짜를 전송하는 가장 확실한 방법은 JSON을 사용하는 겁니다. 날짜는 JSON에서 1:1 대칭이 되게끔 파싱할 수 없으므로 JSO
     * N 명세에는 날짜에 대한 데이터 타입을 정의하지 않았습니다.
     */
    {
        const before = { d: new Date() };
        console.log(before.d instanceof Date); // true
        const json = JSON.stringify(before);
        const after = JSON.parse(json);
        console.log(after.d instanceof Date); // false
        console.log(typeof after.d); // "string"

        // 즉, JSON으로 바로 날짜를 다룰 수는 없지만, 전송된 문자열에서 날짜를 '복구'하는 것은 가능합니다.
        after.d = new Date(after.d);
        console.log(after.d instanceof Date); // true

        /**
         * 원래 날짜가 어느 타임존에 있었든, 일단 JSON으로 인코드된 날짜는 UTC입니다. 그리고 JSON으로 인코드된 문자열을 Date 생성자에 넘
         * 겨서 얻은 날짜는 사용자의 타임존을 기준으로 표시됩니다.
         * 
         * 문자열로 인코드하지 않고 valueof() 메서드로 얻은 숫자를 그냥 전송해도 됩니다.
         */
        {
            const before = { d: new Date().valueOf() };
            console.log(typeof before.d); // "number"
            const json = JSON.stringify(before);
            const after = JSON.parse(json);
            console.log(typeof after.d); // "number"
            const d = new Date(after.d);
        }

        /**
         * NOTE_ 자바스크립트에서는 JSON으로 인코드된 날짜 문자열을 일관되게 처리하지만, 다른 언어나 운영체제에서 제공하는 JSON 라이브러리
         * 는 그렇지 않습니다. 특히, .NET JSON 직렬화기는 JSON으로 인코드된 날짜 객체를 자신만의 형식으로 감싸 버립니다. 따라서 자바스크립트
         * 가 아닌 다른 시스템과 날짜 데이터를 주고 받을 때는 그 시스템에서 날짜를 어떻게 직렬화하는지 알아둬야 합니다. 이런 상황에는 유닉스 타임스
         * 탬프를 주고받는 편이 더 안전합니다. 하지만 유닉스 타임스탬프를 주고받을 때도 한 가지 조심할 것이 있습니다. 숫자형 값을 밀리초가 아니라
         * 초 기준으로 해석하는 라이브러리도 많습니다.
         */
    }

    /**
     * 날짜 비교
     * 
     * 날짜 A와 날짜 B중 어느 쪽이 더 앞인가 하는 단순한 날짜 비교는 자바스크립트에 내장된 비교 연산자를 통해 할 수 있습니다. Date 인스턴스는 날
     * 짜를 숫자로 저장하므로, 숫자에 쓸 수 있는 비교 연산자를 그대로 쓰면 됩니다.
     */
    {
        const d1 = new Date(1996, 2, 1);
        const d2 = new Date(2009, 4, 27);
        console.log(d1 > d2); // false
        console.log(d1 < d2); // true
    }

    /**
     * 날짜 연산
     * 
     * 날짜는 숫자이므로 날짜에서 날짜를 빼면 몇 밀리초가 지났는지 알 수 있습니다.
     */
    {
        const d1 = new Date(1996, 2, 1);
        const d2 = new Date(2009, 4, 27);
        const msDiff = d2 - d1;
        const daysDiff = msDiff / 1000 / 60 / 60 / 24;
        console.log(msDiff); // 417744000000 ms
        console.log(daysDiff); // 4835 days
    }

    /**
     * 요약
     * 
     * 자바스크립트의 날짜는 1970년 1월 1일 UTC로부터 몇 밀리초가 지났는지 나타내는 숫자입니다.
     * 날짜를 생성할 때는 타임존에 유의하십시오.
     * 날짜 형식을 자유롭게 바꿀 수 있어야 한다면 Moment.js를 사용하십시오.
     */

})();